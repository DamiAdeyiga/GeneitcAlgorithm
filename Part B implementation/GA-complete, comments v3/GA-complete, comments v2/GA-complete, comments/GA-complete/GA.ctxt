#BlueJ class context
comment0.target=GA
comment0.text=\r\n\ Simple\ GA\ for\ the\ OneMax\ problem.\r\n\ \r\n\ @author\ Fernando\ Otero\r\n\ @version\ 1.2\r\n
comment1.params=input
comment1.target=read(java.lang.String)
comment10.params=n
comment10.target=int[]\ findBestN(int)
comment10.text=\r\n\ Returns\ the\ best\ n\ individuals\ in\ the\ current\ population.\r\n\ \r\n\ @return\ the\ best\ n\ individuals\ in\ the\ current\ population.\r\n
comment2.params=rule\ instance
comment2.target=boolean\ compare(boolean[],\ boolean[])
comment3.params=rule\ instance
comment3.target=boolean\ predict(boolean[],\ boolean[])
comment4.params=args
comment4.target=void\ main(java.lang.String[])
comment5.params=
comment5.target=void\ run()
comment5.text=\r\n\ Starts\ the\ execution\ of\ the\ GA.\r\n
comment6.params=
comment6.target=int\ tournament()
comment6.text=\r\n\ Returns\ the\ index\ of\ the\ selected\ parent\ using\ a\ tournament\ selection.\r\n\ \r\n\ @return\ the\ index\ of\ the\ selected\ parent\ using\ a\ tournament\ selection.\r\n
comment7.params=
comment7.target=void\ initialise()
comment7.text=\r\n\ Initialises\ the\ population.\r\n
comment8.params=parent
comment8.target=boolean[]\ pointMutation(int)
comment8.text=\r\n\ Point\ mutation\ operator.\r\n\ \r\n\ @param\ parent\ index\ of\ the\ parent\ individual\ from\ the\ population.\r\n\ \r\n\ @return\ the\ generated\ offspring.\r\n
comment9.params=first\ second
comment9.target=boolean[][]\ onePointCrossover(int,\ int)
comment9.text=\r\n\ One-point\ crossover\ operator.\ Note\ that\ the\ crossover\ generates\ two\ offsprings,\r\n\ so\ both\ current\ and\ current+1\ position\ in\ the\ new\ population\ must\ be\ filled.\r\n\ \r\n\ @param\ first\ index\ of\ the\ first\ parent\ individual\ from\ the\ population.\r\n\ @param\ second\ index\ of\ the\ second\ parent\ individual\ from\ the\ population.\r\n\ \r\n\ @return\ the\ generated\ offspring.\r\n
numComments=11
